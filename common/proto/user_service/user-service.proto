syntax="proto3";

option go_package = "common/user";

package user;

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

service UserService{
        rpc GetUser(GetUserRequest) returns(GetUserResponse) {
        	option (google.api.http) = {
            get: "/user/{id}"
          };
            }
        rpc GetUserByUsername(GetUserByUsernameRequest) returns(GetUserByUsernameResponse) {
              option (google.api.http) = {
          get: "/user/username/{username}"
        };
        }
        rpc UpdateUser(UpdateUserRequest) returns(UpdateUserResponse) {
          option (google.api.http) = {
          put: "/user"
            body: "user"
        };
        }
        rpc SearchUsers(SearchUsersRequest) returns(SearchUsersResponse) {
          option (google.api.http) = {
          get: "/user/search/{username}/{loggedUserId}"
        };
        }
        rpc CreateUser(CreateUserRequest) returns(CreateUserResponse) {
          option (google.api.http) = {
          post: "/user"
            body: "user"
          };
        }
        rpc AddExperience(AddExperienceRequest) returns(AddExperienceResponse) {
            option (google.api.http) = {
              post: "/user/experience"
              body: "experience"
        };
        }
        rpc AddInterest(AddInterestRequest) returns(AddInterestResponse) {
          option (google.api.http) = {
            post: "/user/interest"
            body: "interest"
            };
        }
        rpc RemoveExperience(RemoveExperienceRequest) returns(RemoveExperienceResponse) {
          option (google.api.http) = {
            delete: "/user/experience/{id}"
            };
        }
        rpc RemoveInterest(RemoveInterestRequest) returns(RemoveInterestResponse) {
          option (google.api.http) = {
            delete: "/user/interest/{id}"
            };
        }
        rpc Login(LoginRequest) returns(LoginResponse) {
          option (google.api.http) = {
            post: "/user/login"
            body: "credentials"
          };
        }
        rpc BlockUser(BlockUserRequest) returns(BlockUserResponse) {
          option (google.api.http) = {
            put: "/user/block/{userId}/{blockedUserId}"
            body: ""
          };
        }
        rpc GetApiKey(ApiKeyRequest) returns(ApiKeyResponse) {
          option (google.api.http) = {
            get: "/user/apiKey/{username}/{password}"
          };
        }
        rpc CreateJobOffer(CreateJobOfferRequest) returns(CreateJobOfferResponse) {
          option (google.api.http) = {
            post: "/jobs/offer"
            body: "offer"
          };
        }
        rpc ActivateAccount(ActivateAccountRequest) returns(ActivateAccountResponse) {
          option (google.api.http) = {
            get: "/user/activate"
          };
        }
        rpc GetApiKeyForUsername(GetApiKeyForUsernameRequest) returns(GetApiKeyForUsernameResponse) {
          option (google.api.http) = {
            get: "/user/apiKey/{username}"
          };
        }
        rpc FindAllBlocked(FindAllBlockedRequest) returns(FindAllBlockedResponse) {
          option (google.api.http) = {
            get: "/user/blocked/{id}"
          };
        }
        rpc GetPrivateStatusForUserId(GetPrivateStatusForUserIdRequest) returns(GetPrivateStatusForUserIdResponse) {
          option (google.api.http) = {
            get: "/user/status/{id}"
          };
        }
}

message GetPrivateStatusForUserIdRequest {
  int64 id = 1;
}
message GetPrivateStatusForUserIdResponse {
  bool isPrivate = 1;
}
message FindAllBlockedRequest {
  int64 id = 1;
}
message FindAllBlockedResponse {
  repeated User users = 1;
}
message ActivateAccountRequest {
  google.protobuf.StringValue token = 1;
}
message ActivateAccountResponse {
}

message CreateJobOfferRequest {
  JobOffer offer = 1;
}
message CreateJobOfferResponse {
}
message ApiKeyRequest {
  string username = 1;
  string password = 2;
}
message ApiKeyResponse {
  string apiKey = 1;
}
message GetApiKeyForUsernameRequest {
  string username = 1;
}
message GetApiKeyForUsernameResponse {
  string apiKey = 1;
}
message GetUserRequest {
        int64 id = 1;
}
message GetUserResponse {
        User user = 1;
}
message GetUserByUsernameRequest {
  string username = 1;
}
message GetUserByUsernameResponse {
  UserWithPass user = 1;
}
message UpdateUserRequest {
  UserWithPass user = 1;
}
message UpdateUserResponse {
  int64 id = 1;
}
message SearchUsersRequest {
  string username = 1;
  int64 loggedUserId = 2;
}
message SearchUsersResponse {
  repeated User users = 1;
}
message CreateUserRequest {
  UserWithPass user = 1;
}
message CreateUserResponse {
  int64 id = 1;
}
message AddExperienceRequest {
  Experience experience = 1;
}
message AddExperienceResponse {
  int64 id = 1;
}
message AddInterestRequest {
  Interest interest = 1;
}
message AddInterestResponse {
  int64 id = 1;
}
message RemoveExperienceRequest {
  int64 id = 1;
}
message RemoveExperienceResponse {
}
message RemoveInterestRequest {
  int64 id = 1;
}
message RemoveInterestResponse {
}
message LoginRequest {
  Credentials credentials = 1;
}
message LoginResponse {
  string token = 1;
}
message BlockUserRequest {
  int64 userId = 1;
  int64 blockedUserId = 2;
}
message BlockUserResponse {
}


message User {
  int64 id = 1;
  string name = 2;
  string username = 3;
  string email = 4;
  string gender = 5;
  string phone = 6;
  string date = 7;
  string biography = 8;
  repeated Experience experience = 9;
  repeated Interest interests = 10;
  bool isPrivate = 11;
}

message UserWithPass {
  int64 id = 1;
  string name = 2;
  string username = 3;
  string email = 4;
  string gender = 5;
  string phone = 6;
  string date = 7;
  string biography = 8;
  string password = 9;
  repeated Experience experience = 10;
  repeated Interest interests = 11;
  bool isPrivate = 12;
}

message Experience {
  int64 id = 1;
  string company = 2;
  string position = 3;
  string from = 4;
  string until = 5;
  int64 userId = 6;
}

message Interest {
  int64 id = 1;
  string interest = 2;
  int64 userId = 3;
}

message Credentials {
  string username = 1;
  string password = 2;
}

message JobOffer {
  int64 id = 1;
  string jobPosition = 2;
  string companyName = 3;
  string jobInfo = 4;
  string qualifications = 5;
  string apiKey = 6;
}